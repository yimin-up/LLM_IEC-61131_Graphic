Certainly! For the purpose of this task, we'll be creating a structured text program for controlling the given process. We will cover the essential components: detecting any bottle, specifically detecting empty bottles, and actuating a cylinder to remove the empty bottles from the conveyor. To achieve this, let's assume the proximity sensors and the cylinder are represented as follows in the PLC programming:

- `AnyBottleDetected` (BOOL) - A boolean input that becomes TRUE when any bottle is detected by the proximity sensor.
- `EmptyBottleDetected` (BOOL) - A boolean input that becomes TRUE when an empty bottle is specifically detected.
- `CylinderActuate` (BOOL) - A boolean output for actuating the cylinder to remove the empty bottle.

Given these definitions, below is the structured text program to achieve the specified task:

```pascal
PROGRAM BottlePackaging
VAR
    //Input variables
    AnyBottleDetected : BOOL;
    EmptyBottleDetected : BOOL;
    
    //Output variables
    CylinderActuate : BOOL;
END_VAR

//Logic for detecting bottles and handling empty bottles
IF AnyBottleDetected THEN
    IF EmptyBottleDetected THEN
        // An empty bottle is detected; actuate cylinder to remove it.
        CylinderActuate := TRUE;
    ELSE
        // A bottle is detected but it's not empty; no action required, ensure cylinder is not actuated.
        CylinderActuate := FALSE;
    END_IF;
ELSE
    // If no bottle is detected, ensure cylinder is not actuated.
    CylinderActuate := FALSE;
END_IF;
```

This program begins by checking if any bottle is detected on the conveyor. If a bottle is detected, it further checks if the bottle is empty. If the detected bottle is empty (`EmptyBottleDetected` is TRUE), the program activates the cylinder (`CylinderActuate` is set to TRUE) to remove it. Otherwise, the cylinder remains inactive. If no bottle is detected at all, the cylinder is also kept inactive.

Remember, this is a basic structure and logic for your requirements. Depending on the specificities of your sensors, conveyors, and actuators (cylinder in this case), you might need to incorporate more detailed control logic, including timings for the actuation of the cylinder, signal debouncing for the sensors, and safety interlocks for emergency stops or other protective mechanisms.