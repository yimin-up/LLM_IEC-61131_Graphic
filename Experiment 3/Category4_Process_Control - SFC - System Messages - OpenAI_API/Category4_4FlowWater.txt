Designing a PID feedback flow control system for chemical dosing in a water treatment process involves implementing a control strategy that adjusts the chlorine dosing rate to maintain a target concentration, compensating for process disturbances. Here is an ASCII representation of a Sequential Function Chart (SFC) based on IEC 61131-3 standards, incorporating PID control logic for the specified application:

Please note, this simplified example assumes:
- Flow rate measurements and PID calculations are performed in discrete steps every 100 ms.
- The PID controller aims to maintain a dosing rate of 3 ppm (parts per million) of chlorine.
- The PLC system interfaces with flow sensors and a variable speed pump (or valve) for adjusting the dosing rate.

```plaintext
+----------------------------------------------------------------------------+
|    Step: Initial_Step                                                      |
|    -----------------------------------------------------                   |
|   | Action: Initialization                         |   |                  |
|   | ------------------------------------------------- |                   |
|   | - Initialize PID parameters (Kp, Ki, Kd)         |                   |
|   | - Set target dosing rate to 3 ppm                |                   |
|   | - Initialize system variables                     |                  |
|    -----------------------------------------------------                   |
|            |                                                                |
|            v                                                                |
|    Transition: system_ready                                                 |
|    Condition: System & sensors OK                                           |
+----------------------------------------------------------------------------+
            |
            v
+----------------------------------------------------------------------------+
|    Step: Measure_Flow                                                      |
|    -----------------------------------------------------                   |
|   | Action: Read_Flow                               |   |                  |
|   | ------------------------------------------------- |                   |
|   | - Read flow sensor data                         |                   |
|   | - Calculate actual dosing rate                  |                   |
|    -----------------------------------------------------                   |
|            |                                                                |
|            v                                                                |
|    Transition: measurement_done                                              |
|    Condition: Every 100ms                                                   |
+----------------------------------------------------------------------------+
            |
            v
+----------------------------------------------------------------------------+
|    Step: PID_Control                                                       |
|    -----------------------------------------------------                   |
|   | Action: Adjust_Dosing                          |   |                  |
|   | ------------------------------------------------- |                   |
|   | - Compute PID output based on error             |                   |
|   |   (setpoint - actual value)                     |                   |
|   | - Adjust dosing pump speed/valve accordingly    |                   |
|    -----------------------------------------------------                   |
|            |                                                                |
|            v                                                                |
|    Transition: adjustment_done                                               |
|    Condition: Adjustment applied                                            |
+----------------------------------------------------------------------------+
            |
            v
+----------------------------------------------------------------------------+
|    Step: Check_Alarm                                                        |
|    -----------------------------------------------------                   |
|   | Action: Evaluate_System_Status                  |   |                  |
|   | ------------------------------------------------- |                   |
|   | - Check for system errors or alarms              |                   |
|   | - Implement safety shutdown if necessary         |                   |
|    -----------------------------------------------------                   |
|            |                                                                |
|            v                                                                |
|    Transition: alarm_checked                                                |
|    Condition: Status checked every 100ms                                    |
+----------------------------------------------------------------------------+
            |
            | (loop back to Measure_Flow)
            |
            +----------------------------------------------------------------+
```

This SFC outline incorporates the essence of a PID feedback loop for chemical dosing atop a water treatment process, divided into sequential steps:

- **Initial_Step:** Initializes the PID controller parameters and sets target dosing rate.
- **Measure_Flow:** Measures water flow and calculates the actual dosing rate of chlorine.
- **PID_Control:** Adjusts the chlorine dosing rate to match the target (3 ppm) by manipulating a control element (pump speed or valve opening) based on the PID algorithm.
- **Check_Alarm:** Monitors for any system alarms or errors and takes necessary action(s).

The transitions between steps are conditioned on factors like completion of previous tasks, and system checks performed on a regular basis defined by the process requirements (here, every 100 ms). Implementing this SFC requires in-depth IEC 61131-3 programming knowledge, including function blocks for PID control, and interfacing for sensors and actuators.

This example is a conceptual design. Detailed implementation will require appropriate scaling of PID parameters, error handling mechanisms, and ensuring that the system meets all operational safety and functional requirements.