Designing a Sequential Function Chart (SFC) for an elevator control system requires careful consideration of states, transitions, actions, and conditions. Given the constraints and requirements, we will break down the operation into key states such as moving up, moving down, door opening, waiting at a floor, and conditionally transitioning between these states based on input from the limit switches, call buttons, and timers.

For the sake of this example, let's simplify the inputs and variables:
- **UI[x]**: Up input from floor x.
- **DI[x]**: Down input from floor x.
- **LU[x]** and **LD[x]**: Top and bottom limit switches at floor x, respectively.
- **BI[x]**: Button input inside the elevator for floor x.
- **T7**: 7-second timer for door opening.
- **T10**: 10-second timer to re-open the door.

Please note, due to the limitations of ASCII representation, this will be a simplified yet illustrative example of how such a system might be represented. IEC 61131-3 supports Sequential Function Charts, but the actual implementation might require supplementary Function Block Diagrams (FBD) or Structured Text (ST) for complete functionality.

```plaintext
+-----------------------------------------+
|                Start                    |
+----+------------------------------------+
     |
     v
+----+------------------------------------+
| Check_Required_Floor                    |
| DECISION: UP? DOWN? or STAY?            |
+----+---+----------------+---+-----------+
     |   |                |   |
     |   |                |   |
    UP  STAY             DOWN |
     |   |                |   |
     v   v                v   |
+----+---+----+      +----+---+----+
|  Moving_Up  |      | Moving_Down |
+----+--------+      +----+--------+
     |                   |
 LU[x]?               LD[x]?
     |                   |
     v                   v
+----+--------+      +----+------------+
| Check_Up_Call|      |Check_Down_Call |
| DECISION: Floor|OR  |DECISION: Floor|OR
| Call_Up?       |    | Call_Down?     |
+----+-+-------+    +----+-+----------+
     | |                | |
     | |                | |
     | +--------+ +------+ |
     |          | |        |
     v          v v        v
 +---+----------+-++      +-+---------+
 | Open_Door    | Wait_at_Floor       |
 +---+----------+ |      | +----------+
     |            +------+ |
   T7?|              T10?  |
     |                   |
     |                   |
     |                   |
     v                   v
  +--+---------+    +----+------------+
  | Wait_Close |    | Check_Required_Floor|
  +------------+    +---------------------+
```

**Explanation of Major States and Transitions:**
- **Start**: The initial state of the elevator system.
- **Check_Required_Floor**: Determines the direction based on calls and current position.
  - **UP**: Transition to "Moving_Up" if the required floor is above.
  - **DOWN**: Transition to "Moving_Down" if the required floor is below.
  - **STAY**: Transition to "Open_Door" if already at the required floor.
- **Moving_Up** and **Moving_Down**: Elevator moves in specified direction until a limit switch (LU[x] for moving up, LD[x] for moving down) or an internal floor button BI[x] is activated.
- **Check_Up_Call** and **Check_Down_Call**: Check for any call buttons pressed in the direction the elevator is currently moving.
- **Open_Door**: Triggers the door to open, transitioning to "Wait_Close" based on timer T7 for door to stay open.
- **Wait_at_Floor**: The elevator stays at the current floor waiting for button press inside. If the T10 timer expires without any button press, it checks for required floor again.
- **Wait_Close**: A transitional state waiting for the door to close (could be based on an additional timer not detailed here) before moving onto another state.

This simplified ASCII chart represents the core logic behind an elevator's operation. In an actual implementation, each state and transition would involve more detailed conditions, and actions would include engaging motors, triggering timers, and updating system status based on input from various sensors and buttons.