To design a self-contained IEC 61131-3 Sequential Function Chart (SFC) program that controls a conveyor belt system with stations and sensors, one needs to understand that SFC programming language expresses the control sequence and system organization. Due to the inherent limitations of text-based communication, and the fact SFCs are primarily graphical, the following description aims to translate these graphical concepts into a textual, structured format.

Given requirements:
- A conveyor belt system with three stations.
- Each station allows the user to stop the conveyor.
- Five sensors (let's name them `Sensor1` to `Sensor5`) detect objects.
- Conveyor belt speed: 2 meters/second.

**Program Description (Textual Representation):**

**Initial Step: Idle State**
- Initially, the conveyor system is in the 'Idle' state waiting for objects to be detected (`Sensor1` to `Sensor5`). 
- Once an object is detected by any of the sensors, transition to the 'Running' state.

**Step: Running**
- Conveyor starts (`ConveyorStart` action).
- Set belt speed to 2 meters/second (`SetSpeed(2.0)` action).
- Check continuously for:
  - The stop button at any station being pressed, which transitions to the 'Manual Stop' state.
  - No objects detected by any sensor for a pre-defined period, which transitions to the 'Idle' state again.

**Step: Manual Stop**
- A state entered either from the 'Running' state or 'Error Handling' if the cause was resolved manually.
- Conveyor stops (`ConveyorStop` action).
- Wait for user input to restart the conveyor, transitioning back to the 'Running' state, or for system reset transitioning to the 'Idle' state.

**Step: Error Handling**
- Any unforeseen error including safety errors, emergency stops, or hardware failures send the system into this state.
- All operations cease (`ConveyorStop` action).
- An error message is logged/displayed.
- Manual intervention is required to address the error before transitioning to the 'Manual Stop' state.

**ASCII Representation Guide:**

Due to the limitations in expressing graphical content, below is an attempt to textually represent part of the SFC flow:

```
[Idle State] --(any `Sensor1` to `Sensor5`=True)--> [Running]
[Running] --(Speed != 2.0 m/s)--> [SetSpeed(2.0)]
[Running] --(StopButtonPressed@AnyStation)--> [Manual Stop]
[Running] --(No object detected for period)--> [Idle State]
[Manual Stop] --(Restart)--> [Running]
[Manual Stop] --(Reset)--> [Idle State]
[Running/Error Handling] --(Error Detected)--> [Error Handling]
[Error Handling] --(Manual Intervention)--> [Manual Stop]
```

**Note:** This schematic walkthrough provides a conceptual framework for implementing a control system for a conveyor with stations and sensors according to the IEC 61131-3 standard. In practice, the actual programming involves using a development environment compatible with this standard, where graphical elements would be used to represent states (`Steps`) and transitions, and associated actions would be defined through programming logic tied to those graphical elements.