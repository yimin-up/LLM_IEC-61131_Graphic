To design a Ladder Diagram (LD) for a PID feedback flow control for chemical dosing in a water treatment process, specifically for a chlorine dosing rate of 3 ppm with a sampling rate of 100 ms, we first need to break down the requirements and set up the necessary inputs and outputs. Given the nature of PID control, the program will involve processing a feedback signal (typically from a flow meter or similar sensor), comparing this with a setpoint, and adjusting a control output (such as a dosing pump speed or valve position) to maintain the process variable (chlorine concentration) at the desired setpoint.

### Step 1:####

**Inputs:**
- **Flow Sensor (FS)**: Represents the real-time measurement of chlorine concentration in water. Standard symbol: `I0.0`
- **Setpoint (SPT)**: The desired chlorine concentration, in this case, 3 ppm. While a setpoint might be a fixed value within the control logic, it can also be adjustable via an HMI or SCADA system. For simplicity, we represent this as a constant or an input parameter rather than a physical input. Standard symbol for representation in ladder logic might not be used, it could be a predefined constant in the program.

**Outputs:**
- **Control Output (CO)**: Adjusts the chlorine dosing rate. This could control a pump or a valve. Standard symbol: `Q0.0`

It's worth noting that PID control in ladder logic may involve using function blocks or structured text for the computational part, as implementing PID calculations directly in LD can be complex and not straightforward. However, for the purpose of this task, we'll focus on a simplified representation.

### Step 2:####

Given the limitation of representing complex PID computations in Ladder Diagram ASCII art, below is a simplified and conceptual diagram. Please consider this more as a representation of how inputs and outputs might be logically connected rather than a precise PID control circuit.

```
+----[ ]----+--[ ]--+--( )--+
| FS I0.0   | SPT   | CO Q0.0 |
+-----------+-------+--------+
```

This simple illustration implies that `FS` feeds into a PID control block (not explicitly shown due to its complexity) along with the `SPT`, and based on these, the `CO` is actuated.

### Step 3:####

Given the limitations of ASCII art for representing PID logic, let's assume the "PID Block" takes the form `(PID FS, SPT) -> CO`. This represents a logic where the PID process considers the flow sensor input and the setpoint, then computes the necessary output to the control output device to maintain the set point.

### Step 4:####

The state machine of this simple PID control system would involve continuously monitoring the current chlorine concentration in the water (reported by `FS`), comparing it to the desired concentration (`SPT`), and adjusting the dosing rate (`CO`) accordingly. This would occur at a predefined sampling rate of 100 ms. In its basic form, the states would include reading the sensor, calculating the error between measured and setpoint concentrations, computing the PID output, and adjusting the control output. This loop continues indefinitely to maintain the process variable at the setpoint.

### Step 5:####

In accordance with the IEC 61131-3 standard for PLC programming:

1. **Organization**: The program should be organized into a well-structured form using function blocks if implementing a complex PID algorithm, keeping in mind ladder logic's visualization of physical relay logic.
2. **Symbol Naming and Comments**: Standard symbols and naming conventions are applied (`FS` for flow sensor input, `CO` for control output), which should be described in a comment within the program for clarity.
3. **PID Function Block**: Real implementation would likely use a prebuilt PID control function block compliant with IEC 61131-3, ensuring precise control and standard PID features (such as auto-tuning, setpoint changes, etc.).
4. **Sampling Rate**: A timed interrupt or a similar cyclical task should be used to meet the 100 ms sampling rate requirement, with careful consideration of the PLC's processing capabilities and the overall system's timing requirements.
5. **Error Handling**: The diagram and logic should include considerations for error handling (e.g., sensor failure, communication loss), ensuring safety and reliability in the water treatment process.

This approach adheres to the IEC 61131-3 standard by proposing a structured solution, albeit simplified for demonstration purposes. Implementing a real PID control system would involve using specialized function blocks and more detailed programming considerations, especially for handling the complexities of PID parameters (gain, reset, rate) with respect to the given process dynamics.