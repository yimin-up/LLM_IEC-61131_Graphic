Creating a Sequential Function Chart (SFC) program in ASCII art form for controlling a conveyor belt system with the specified requirements presents a unique challenge, as SFCs are graphical programming languages. However, I'll represent the control logic for this conveyor belt system in a textual form that mimics the flow of an SFC program. The interpretation here assumes familiarity with SFC syntax and principles.

This simplified representation can be integrated into a compliant IEC 61131-3 environment, understanding that actual implementations would require adaptation for specific PLC programming platforms.

Please note, actual sensor inputs, actuator outputs, and programming environment specifics vary between implementations and are abstracted here. For the sake of this representation:

- `Sensor[1..5]`: Five sensors detecting objects on the conveyor belt.
- `Start_Stop_Station[1..3]`: User-operated stations to start or stop the conveyor.
- `Conveyor_Motor`: Controls the conveyor belt, expecting a `Speed` value to control the belt speed.

### Sequential Function Chart Representation

**Initial Step: Start**
- Initial step to begin the program flow.

**Transitions:**
- T1: All sensors are clear, and any user station is activated (`Start_Stop_Station[1..3] == TRUE`)
- T2: Any sensor detects an object (`Sensor[1..5] == TRUE`)
- T3: Conveyor belt is to be stopped (Manual stop from any `Start_Stop_Station[1..3]` or emergency condition)

**Steps:**
- S1: Check_Start_Conditions
  - Action: Await start conditions from user stations or automatically.
- S2: Conveyor_Running
  - Action: Set `Conveyor_Motor.Speed` to the required 2 meters per second.
- S3: Conveyor_Stop
  - Action: Set `Conveyor_Motor.Speed` to 0, stopping the conveyor belt.

**Flow:**

```
(Start)
   |
   V
[S1: Check_Start_Conditions] --T1--> [S2: Conveyor_Running]
             ^                             |
             |                             V
             |----<----T3----[S3: Conveyor_Stop]
             |                             |
             ---------------------T2-------
```

**Transition Conditions:**
- T1: `Start_Stop_Station[1] OR Start_Stop_Station[2] OR Start_Stop_Station[3]`
- T2: `Sensor[1] OR Sensor[2] OR Sensor[3] OR Sensor[4] OR Sensor[5]`
- T3: *(Manual stop condition or others not specified)*

### Detailed Descriptions for Steps

- **S1: Check_Start_Conditions**
  - Await a signal from any of the three user-operated stations to start or automatically, if conditions are met.
- **S2: Conveyor_Running**
  - Upon reception of a start signal or automatic condition fulfillment, the conveyor belt starts running at 2 meters per second.
- **S3: Conveyor_Stop**
  - If any station signals a stop or an unspecified emergency condition occurs, transition T3 will trigger this step, stopping the conveyor.

### Note:
The SFC programming structure is highly dependent on the PLC hardware and programming environment you are using. Make sure to refer to the specific platform's documentation for implementation details such as how to read sensors, control actuators, and implement SFC programming logic according to IEC 61131-3 standards.